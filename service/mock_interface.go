// Code generated by MockGen. DO NOT EDIT.
// Source: interfaces.go

// Package service is a generated GoMock package.
package service

import (
	model "exercises/Catalog/model"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockServInterface is a mock of ServInterface interface
type MockServInterface struct {
	ctrl     *gomock.Controller
	recorder *MockServInterfaceMockRecorder
}

// MockServInterfaceMockRecorder is the mock recorder for MockServInterface
type MockServInterfaceMockRecorder struct {
	mock *MockServInterface
}

// NewMockServInterface creates a new mock instance
func NewMockServInterface(ctrl *gomock.Controller) *MockServInterface {
	mock := &MockServInterface{ctrl: ctrl}
	mock.recorder = &MockServInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockServInterface) EXPECT() *MockServInterfaceMockRecorder {
	return m.recorder
}

// GetById mocks base method
func (m *MockServInterface) GetById(arg0 int) (model.Prod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetById", arg0)
	ret0, _ := ret[0].(model.Prod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetById indicates an expected call of GetById
func (mr *MockServInterfaceMockRecorder) GetById(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetById", reflect.TypeOf((*MockServInterface)(nil).GetById), arg0)
}

// GetAll mocks base method
func (m *MockServInterface) GetAll() ([]model.Prod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]model.Prod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockServInterfaceMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockServInterface)(nil).GetAll))
}

// Create mocks base method
func (m *MockServInterface) Create(arg0, arg1 string) (model.Prod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1)
	ret0, _ := ret[0].(model.Prod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create
func (mr *MockServInterfaceMockRecorder) Create(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockServInterface)(nil).Create), arg0, arg1)
}

// Update mocks base method
func (m *MockServInterface) Update(arg0 int, arg1, arg2 string) (model.Prod, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(model.Prod)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockServInterfaceMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockServInterface)(nil).Update), arg0, arg1, arg2)
}

// Delete mocks base method
func (m *MockServInterface) Delete(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockServInterfaceMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockServInterface)(nil).Delete), arg0)
}
